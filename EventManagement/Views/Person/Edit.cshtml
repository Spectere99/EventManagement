@model EventManagement.Models.PersonViewModel

@{
    ViewBag.Title = "Edit";
}
<head>
    <title>Edit</title>
    <script src="~/Scripts/jquery-1.10.2.js" type="text/javascript"></script>
    <script src="~/Scripts/jquery-1.10.2.min.js" type="text/javascript"></script>
    <script src="~/js/register.js" type="text/javascript"></script>

</head>
<h2>Edit</h2>

@using (Html.BeginForm())
//"AddPerson", "Person", new { personId = Model.ParentPersonId}, FormMethod.Post))
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <h4>Enter your child's information</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(m => m.ParentPersonId)
        <div class="row">
            <div class="col-md-4 form-group">
                @Html.LabelFor(m => m.FirstName)
                @Html.TextBoxFor(m => m.FirstName, new { @class = "form-control", placeholder = "First" })
                @Html.ValidationMessageFor(model => model.FirstName, "", new { @class = "text-danger" })
            </div>
            <div class="col-md-4 form-group">
                @Html.LabelFor(m => m.MiddleName)
                @Html.TextBoxFor(m => m.MiddleName, new { @class = "form-control", placeholder = "Middle" })
                @Html.ValidationMessageFor(model => model.MiddleName, "", new { @class = "text-danger" })
            </div>
            <div class="col-md-4 form-group">
                @Html.LabelFor(m => m.LastName)
                @Html.TextBoxFor(m => m.LastName, new { @class = "form-control", placeholder = "Last" })
                @Html.ValidationMessageFor(model => model.LastName, "", new { @class = "text-danger" })
            </div>

            <div class="col-md-4 form-group">
                @Html.LabelFor(m => m.Notes)
                @Html.TextAreaFor(m => m.Notes, new { @class = "form-control", rows = "4", cols = "50", placeholder = "Any allergies, etc?" })
                @Html.ValidationMessageFor(model => model.Notes, "", new { @class = "text-danger" })
            </div>
            <div class="col-md-3 form-group">
                @Html.LabelFor(m => m.BirthDay)
                <div class="input-group">
                    @Html.TextBoxFor(m => m.BirthDay, new { @class = "form-control", name = "BirthDay", @Value = Model.BirthDay.ToString("d") })
                    <span class="input-group-btn">
                        <button type="button" class="btn btn-default" data-toggle="datepicker" data-target-name="BirthDay">
                            <span class="glyphicon glyphicon-calendar"></span>
                        </button>
                    </span>
                    @Html.ValidationMessageFor(model => model.BirthDay, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-md-4 form-group">
                @Html.LabelFor(model => model.PersonType, htmlAttributes: new { id = "lblPersonTypeList" })
                @Html.DropDownList("PersonType", Model.PersonTypeList.Select(i => new SelectListItem { Text = i.Type.ToString(), Value = i.PersonTypeId.ToString() }), "Select ...", new { @class = "form-control" })<br />
                @Html.ValidationMessageFor(model => model.PersonType, "", new { @class = "text-danger" })
            </div>
            <div class="col-md-4 form-group">
                @Html.LabelFor(model => model.UnitTypeList, htmlAttributes: new { id = "lblUnitTypeList" })
                @Html.DropDownList("UnitType", Model.UnitTypeList.Select(i => new SelectListItem { Text = i.Type.ToString(), Value = i.UnitTypeId.ToString() }), "Select ...", new { @class = "form-control", @onchange = "FillUnits()" })<br />
                @Html.ValidationMessageFor(model => model.UnitType, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="row">
            <div class="col-md-4 form-group">
                @Html.LabelFor(model => model.UnitList, htmlAttributes: new { id = "lblUnitList" })
                @Html.DropDownList("Unit", Model.UnitList.Select(i => new SelectListItem { Text = i.UnitNumber.ToString(), Value = i.UnitId.ToString() }), "Select ...", new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.Unit, "", new { @class = "text-danger" })
            </div>
            <div class="col-md-4 form-group">
                @Html.LabelFor(model => model.UnitRankList, htmlAttributes: new { id = "lblUnitRankList" })
                @Html.DropDownList("Rank", Model.UnitRankList.Select(i=> new SelectListItem{Text = i.Rank.ToString(), Value = i.UnitRankId.ToString()}), new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.Rank, "", new { @class = "text-danger" })<br />
            </div>
        </div>
        
        <div class="form-group">
            <div class="col-md-5">
                @Html.ActionLink("Cancel", "Index", new { id = Model.PersonId }, new { @class = "btn btn-default" })
                <input type="submit" value="Save" class="btn btn-primary" />
            </div>
        </div>
    </div>
}

<script src="~/js/person.js"></script>

