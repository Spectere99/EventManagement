@using System.Security.Claims
@using EventManagement.Models
@{
    List<RoleMenuItem> menus = new List<RoleMenuItem>
    {
        new RoleMenuItem("Global Administration","Index","Admin","Administrator"),
        new RoleMenuItem("My Profile", "HouseHold", "Account", "Administrator,Super User,User"),
        new RoleMenuItem("My Organization","Index","Manage","Administrator,Super User,User"),
        new RoleMenuItem("My Reservations","Index","Manage","Administrator,Super User,User"),
        new RoleMenuItem("API", "Index", "Help", "Administrator")
     };

    <div class="navbar-collapse navbar-sub-custom">
        <ul class="nav navbar-nav">
            @if (HttpContext.Current.User.Identity.IsAuthenticated)
            {
                //String[] roles = Roles.GetRolesForUser();
                var roles = ((ClaimsIdentity)User.Identity).Claims
                    .Where(c => c.Type == ClaimTypes.Role)
                    .Select(c => c.Value);
                var links = from item in menus
                            where item.RoleNames.Split(new String[] { "," }, StringSplitOptions.RemoveEmptyEntries).Any(x => roles.Contains(x) || x == "All")
                            select item;
                foreach (var link in links)
                {
                    @:<li>@Html.ActionLink(link.LinkText, link.ActionName, link.ControllerName)</li>
                }
            }
            else
            {
                var links = from item in menus
                            where item.RoleNames.Split(new String[] { "," }, StringSplitOptions.RemoveEmptyEntries).Any(x => new string[] { "All", "Anonymous" }.Contains(x))
                            select item;
                foreach (var link in links)
                {
                    @:<li>@Html.ActionLink(link.LinkText, link.ActionName, link.ControllerName)</li>
                }
            }
        </ul>

    </div>
}
